name: Custom build kernel and Wi-Fi Module

on:
  workflow_dispatch:
    inputs:
      kernel_repo_url:
        description: 'Kernel repository URL'
        required: true
        default: 'https://github.com/LineageOS/android_kernel_oneplus_sm8150'
      kernel_branch:
        description: 'Kernel branch'
        required: true
        default: 'lineage-22.1'
      defconfig_file:
        description: 'Kernel defconfig filename'
        required: true
        default: 'lineage_sm8150_defconfig'
      use_kernelsu_next:
        description: 'Use KernelSU-Next instead of KernelSU'
        required: true
        default: 'false'
      enable_susfs:
        description: 'Enable SUSFS patches'
        required: true
        default: 'false'
      release_name:
        description: 'Base name of the zip release files'
        required: true
        default: 'OP7_KSN_wifi'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_HARDLINK: "true"
      CCACHE_NOHASHDIR: "true"
      CCACHE_MAXSIZE: "3G"
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Prepare kernel source (fresh)
      run: |
        set -euo pipefail
        rm -rf kernel modules || true
        git clone --depth=1 --branch "${{ github.event.inputs.kernel_branch }}" "${{ github.event.inputs.kernel_repo_url }}" kernel
        cd kernel
        git submodule update --init --recursive

    - name: Setup dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y clang-18 llvm-18 lld-18 \
          gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi binutils make python3 libssl-dev bc bison flex unzip \
          ca-certificates xz-utils mkbootimg cpio device-tree-compiler git git-lfs zip

    - name: Setup KernelSU or KernelSU-Next
      working-directory: kernel
      run: |
        set -euo pipefail
        export PATH=/usr/lib/llvm-18/bin:$PATH
        if [ "${{ github.event.inputs.use_kernelsu_next }}" = "true" ]; then
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -
        else
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s stable
        fi

    - name: Apply SUSFS patches if enabled
      if: ${{ github.event.inputs.enable_susfs == 'true' }}
      working-directory: kernel
      run: |
        set -euo pipefail
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b kernel-4.14 susfs_patches
        cp susfs_patches/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch KernelSU/ || true
        cp susfs_patches/kernel_patches/50_add_susfs_in_kernel-4.14.patch . || true
        cp -r susfs_patches/kernel_patches/fs/* ./fs/ || true
        cp -r susfs_patches/kernel_patches/include/linux/* ./include/linux/ || true
        if [ -f KernelSU/10_enable_susfs_for_ksu.patch ]; then
          (cd KernelSU && patch -N -p1 -F3 < 10_enable_susfs_for_ksu.patch) || echo "KernelSU SUSFS patch already applied"
        fi
        if [ -f 50_add_susfs_in_kernel-4.14.patch ]; then
          patch -N -p1 -F3 < 50_add_susfs_in_kernel-4.14.patch || echo "Kernel core SUSFS patch already applied"
        fi
        if find . -name "*.rej" | grep -q .; then
          echo "SUSFS patch rejects found:"; find . -name "*.rej" -print -exec sed -n '1,120p' {} \;;
          exit 1;
        fi

    - name: Add SUSFS configs if enabled
      if: ${{ github.event.inputs.enable_susfs == 'true' }}
      working-directory: kernel
      run: |
        conf="arch/arm64/configs/${{ github.event.inputs.defconfig_file }}"
        {
          echo "CONFIG_KSU=y"
          echo "CONFIG_KSU_SUSFS=y"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y"
          echo "CONFIG_KSU_SUSFS_SUS_SU=y"
        } >> "$conf"

    - name: Disable taskstats family (robust)
      working-directory: kernel
      run: |
        set -e
        conf="arch/arm64/configs/${{ github.event.inputs.defconfig_file }}"
        for opt in CONFIG_TASKSTATS CONFIG_TASK_DELAY_ACCT CONFIG_TASK_XACCT CONFIG_TASK_IO_ACCOUNTING; do
          sed -i "/^$opt[= ]/d" "$conf" || true
          echo "${opt}=n" >> "$conf"
        done
        tail -n 20 "$conf" || true

    - name: Patch btrfs to timespec64 (idempotent, safe)
      working-directory: kernel
      run: |
        set -e
        file=fs/btrfs/inode.c
        # Guard: only patch if exact unpatched line exists
        if grep -qE "^\s*struct timespec now = current_time\(&parent_inode->vfs_inode\);" "$file"; then
          sed -i 's|^\(\s*\)struct timespec now = current_time(&parent_inode->vfs_inode);|\1struct timespec64 now = current_time(&parent_inode->vfs_inode);|' "$file"
          echo "Patched btrfs timespec -> timespec64"
        else
          echo "Skip btrfs timespec patch (already patched or different source)"
        fi
        # Sanity: ensure no corrupted line remains
        if grep -n "struct timespec64 now = current_time(.*struct timespec" "$file"; then
          echo "Detected corruption in btrfs timespec line"; sed -n '6615,6640p' "$file"; exit 1;
        fi

    - name: Patch try_to_unmap arg count (idempotent)
      working-directory: kernel
      run: |
        set -e
        file=mm/huge_memory.c
        if grep -q 'try_to_unmap(page, ttu_flags);' "$file"; then
          sed -i 's|try_to_unmap(page, ttu_flags);|try_to_unmap(page, ttu_flags, NULL);|g' "$file"
          echo "Patched try_to_unmap 2->3 args"
        else
          echo "Skip try_to_unmap patch (already correct)"
        fi
        grep -n "try_to_unmap" "$file" || true

    - name: Patch hugetlbpage ptep handling (idempotent)
      working-directory: kernel
      run: |
        set -e
        file=arch/arm64/mm/hugetlbpage.c
        # Add ptep declaration near top of function if missing
        if grep -n "huge_pte_alloc" "$file" >/dev/null 2>&1; then
          # Insert ptep declaration only if not present in function
          if ! awk '/huge_pte_alloc/{f=1} f && /{/{print NR; exit}' "$file" | xargs -I{} sed -n '{},+80p' "$file" | grep -q "pte_t \*ptep"; then
            line=$(awk '/huge_pte_alloc/{f=1} f && /{/{print NR; exit}' "$file")
            if [ -n "$line" ]; then
              # Insert after opening brace of huge_pte_alloc
              ed -s "$file" <<'ED'
/huge_pte_alloc/
/{/+1
a
        pte_t *ptep = NULL;
.
w
q
ED
              echo "Inserted ptep declaration in huge_pte_alloc"
            fi
          else
            echo "ptep already declared in huge_pte_alloc"
          fi
        fi
        # Ensure guarded use of huge_pmd_share
        if grep -q 'ptep = huge_pmd_share(mm, vma, addr, pud);' "$file"; then
          sed -i 's/ptep = huge_pmd_share(mm, vma, addr, pud);/if (!ptep) ptep = huge_pmd_share(mm, vma, addr, pud);/' "$file"
          echo "Guarded huge_pmd_share assignment with null check"
        else
          echo "huge_pmd_share assignment already guarded or absent"
        fi
        # Show context around the lines
        grep -n "huge_pte_alloc" "$file" || true
        grep -n "ptep = huge_pmd_share" "$file" || true
        sed -n '220,260p' "$file" || true

    - name: Comment out mm->nr_ptes usage (idempotent)
      working-directory: kernel
      run: |
        set -e
        file=mm/khugepaged.c
        if grep -q 'mm->nr_ptes' "$file"; then
          sed -i 's/\(.*mm->nr_ptes.*\)/\/\* REMOVED_for_ARM64 \1 \*\//' "$file"
          echo "Commented mm->nr_ptes usage"
        else
          echo "nr_ptes usage not found (already handled)"
        fi
        grep -n "nr_ptes\|REMOVED_for_ARM64" "$file" || true

    - name: Ensure NR_CPUS
      working-directory: kernel
      run: |
        set -e
        conf="arch/arm64/configs/${{ github.event.inputs.defconfig_file }}"
        grep -q '^CONFIG_NR_CPUS=' "$conf" || echo 'CONFIG_NR_CPUS=8' >> "$conf"
        tail -n 5 "$conf" || true

    - name: Configure kernel (non-interactive)
      working-directory: kernel
      run: |
        set -euo pipefail
        export PATH=/usr/lib/llvm-18/bin:$PATH
        LTO=thin ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- make ${{ github.event.inputs.defconfig_file }}
        LTO=thin ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- make olddefconfig

    - name: Build kernel
      working-directory: kernel
      run: |
        set -euo pipefail
        export PATH=/usr/lib/llvm-18/bin:$PATH
        LTO=thin ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- make -j$(nproc)

    - name: Copy kernel Image.lz4 if exists
      if: always()
      run: |
        if [ -f kernel/out/android12-5.10/dist/Image.lz4 ]; then
          cp kernel/out/android12-5.10/dist/Image.lz4 kernel/AnyKernel3/Image.lz4
        else
          echo "Image.lz4 not found, skipping copy."
        fi

    - name: Package Kernel ZIP
      working-directory: kernel/AnyKernel3
      run: |
        zip -r ../${{ github.event.inputs.release_name }}.zip *

    - name: Build Wi-Fi Module (qca_cld3)
      working-directory: kernel
      run: |
        set -euo pipefail
        export PATH=/usr/lib/llvm-18/bin:$PATH
        LTO=thin ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- make modules_prepare
        LTO=thin ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- make -j$(nproc) -C drivers/staging/qcacld-3.0 M=$(pwd)/drivers/staging/qcacld-3.0 modules
        mkdir -p ../modules/vendor/lib/modules
        find out/drivers/staging/qcacld-3.0 -name "*.ko" -exec cp -v {} ../modules/vendor/lib/modules/ \;
        sudo chown -R $(id -u):$(id -g) ../modules

    - name: Package Wi-Fi Module ZIP
      run: |
        if [ ! -d "modules/vendor/lib/modules" ] || ! ls modules/vendor/lib/modules/*.ko >/dev/null 2>&1; then
          echo "No Wi-Fi modules to package, exiting."
          exit 1
        fi
        cd modules
        zip -r ../${{ github.event.inputs.release_name }}-modules.zip *

    - name: Upload kernel build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-output
        path: kernel/out

    - name: Upload zips
      uses: actions/upload-artifact@v4
      with:
        name: build-zips
        path: |
          kernel/${{ github.event.inputs.release_name }}.zip
          ${{ github.event.inputs.release_name }}-modules.zip
