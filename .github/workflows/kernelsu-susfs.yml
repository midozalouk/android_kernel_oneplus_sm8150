name: Build kernelsu-susfs
on:
  workflow_dispatch:
   inputs:
    codename:
        required: true
        type: string
        default: 'lineage_sm8150'
    repo:
        required: true
        type: string
        default: 'android_kernel_oneplus_sm8150'
  
jobs:
  build-kernelsu-susfs:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_MAXSIZE: "2G"
      CCACHE_HARDLINK: "true"      
      KERNEL_CMDLINE: "ARCH=arm64 CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-androidkernel- CROSS_COMPILE_ARM32=arm-linux-gnueabi- LLVM=1 LLVM_IAS=1 O=out"
      CONFIG: "${{ inputs.repo }}"
      KERNEL_DEFCONFIG: "lineage_sm8150_defconfig"
      DEVICE_NAME: "oneplus7pro"
      DEVICE_CODENAME: "glucamole"
      KERNEL_SOURCE: "https://github.com/LineageOS/android_kernel_oneplus_sm8150"
      KERNEL_BRANCH: "lineage-23.0"      
      DEFCONFIG_NAME: "defconfig"
      KERNELSU_SOURCE: "https://github.com/rsuntk/KernelSU.git"
      KERNELSU_BRANCH: "susfs-v1.5.7"
      KERNELSU_NAME: "KernelSU"
      SUSFS_ENABLE: "true"
      SUSFS_FIXED: "true"
      SUSFS_UPDATE: "true"
      AK3_SOURCE: "https://github.com/ayuschatterjee/AnyKernel3"
      AK3_BRANCH: "master"
      ROM_TEXT: "based_aosp_a16"
      
    steps:                               
      - name: Installing dependencies
        run: |
          sudo apt update -y
          sudo apt install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi clang-14 llvm-14 lld-14 binutils-aarch64-linux-gnu binutils make python3 libssl-dev build-essential bc bison flex unzip libssl-dev ca-certificates xz-utils mkbootimg cpio device-tree-compiler git git-lfs curl   
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          lsb_release -a
          UBUNTU_VERSION=$(lsb_release -sr)
          sudo apt-get update

          if [ $UBUNTU_VERSION == "22.04" ]; then
            sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3
            sudo apt-get install p7zip p7zip-full -y
          else
            sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python3
            sudo apt-get install zstd libc6 binutils libc6-dev-i386 gcc g++ p7zip p7zip-full -y
          fi
          
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: build-kernel-${{ env.DEVICE_NAME }}${{ env.UPLOADNAME }}
          max-size: 2G

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          
          ANYKERNEL_BRANCH="master"
          SUSFS_BRANCH="kernel-4.14"
          
          # Clone repositories using the branch names
          git clone https://github.com/ayuschatterjee/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone --depth=1 --single-branch https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          #cd susfs4ksu
          #git checkout b5c3ada461a61c6ad033693b7a00494ead3a28fd
          #cd ..
          git clone https://github.com/TheWildJames/kernel_patches.git          
          git clone --depth=1 --single-branch --branch lineage-22.1 https://github.com/LineageOS/${{ inputs.repo }} 
      
      - name: Set KSU and SUSFS for DEFCONFIG
        run: |
          cd $GITHUB_WORKSPACE/device_kernel
          echo "CONFIG_KSU=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          if [[ ${{ env.SUSFS_ENABLE }} == "true" ]]; then
            echo "CONFIG_KSU_SUSFS=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "# CONFIG_KSU_SUSFS_SUS_OVERLAYFS is not set" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          fi

      - name: Set Anykernel3 and Others
        run: |
          cd $GITHUB_WORKSPACE/device_kernel

          # Variable
          SUSFS_SOURCE=https://gitlab.com/simonpunk/susfs4ksu.git
          SUSFS_BRANCH=kernel-${{ env.KERNEL_VERSION }}
          KERNEL_PATCHES=https://github.com/JackA1ltman/NonGKI_Kernel_Patches.git
          KERNEL_LOCATION=$(pwd)

          # Set Anykernel3
          git clone ${{ env.AK3_SOURCE }} -b ${{ env.AK3_BRANCH }} Anykernel3 --depth=1

          # Set KernelSU(Manual)
          git clone ${{ env.KERNELSU_SOURCE }} -b ${{ env.KERNELSU_BRANCH }} ${{ env.KERNELSU_NAME }}
          mkdir -p "$KERNEL_LOCATION/drivers/kernelsu" && git clone --depth=1 --filter=blob:none --sparse -b 15.0 https://github.com/SOVIET-ANDROID/kernel_xiaomi_raphael tmp_ksu && cd tmp_ksu && git sparse-checkout set drivers/kernelsu && cp -r drivers/kernelsu/* "$KERNEL_LOCATION/drivers/kernelsu/" && cd .. && rm -rf tmp_ksu
          ln -sf "$(realpath --relative-to="$KERNEL_LOCATION/drivers" "$KERNEL_LOCATION/${{ env.KERNELSU_NAME }}/kernel")" "kernelsu"
          grep -q "kernelsu" "$KERNEL_LOCATION/drivers/Makefile" || printf "\nobj-\$(CONFIG_KSU) += kernelsu/\n" >> $KERNEL_LOCATION/drivers/Makefile
          grep -q "source \"drivers/kernelsu/Kconfig\"" "$KERNEL_LOCATION/drivers/Kconfig" || sed -i "/endmenu/i\source \"drivers/kernelsu/Kconfig\"" "$KERNEL_LOCATION/drivers/Kconfig"
          echo "KernelSU Settings done."
          KSU_VERSION=$(cd ${{ env.KERNELSU_NAME }} && expr $(/usr/bin/git rev-list --count HEAD) + 10200)
          echo "UPLOADNAME=-${{ env.KERNELSU_NAME }}_$KSU_VERSION" >> $GITHUB_ENV

          # Set SUSFS
          git clone $SUSFS_SOURCE -b $SUSFS_BRANCH susfs4ksu --depth=1
          git clone https://github.com/JackA1ltman/NonGKI_Kernel_Patches.git -b mi_kernel NonGKI_Kernel_Patches --depth=1
          cp susfs4ksu/kernel_patches/fs/* fs/
          cp susfs4ksu/kernel_patches/include/linux/* include/linux/

      - name: Patch Kernel for no-kprobe
        run: |
          cd $GITHUB_WORKSPACE
          if grep -q "CONFIG_KSU" "device_kernel/fs/exec.c"; then
            echo "Your kernel source code appears to have been manually patched, so this step is skipped."
          else
            if [[ ${{ env.HOOK_METHOD }} == "normal" ]]; then
              if [[ -f "/tmp/Patches/normal_patches.sh" ]]; then
                  cp /tmp/Patches/normal_patches.sh device_kernel/
                  cd device_kernel
                  bash normal_patches.sh
                  echo "execuated patch successfully."
                  if [[ "${{ env.KERNELSU_NAME }}" != "KernelSU-Next" ]]; then
                        cp /tmp/Patches/backport_patches_early.sh ./
                        bash backport_patches_early.sh
                        echo "execuated backport patch early successfully. "
                  else
                      echo "your kernel needn't backport patch."
                  fi
              else
                  echo "Cannot found normal_patches.sh in build project , please check u file existed in build project !"
                  false
              fi
            elif [[ ${{ env.HOOK_METHOD }} == "syscall" ]]; then
               if [[ -f "/tmp/Patches/syscall_hook_patches_older.sh" ]] && [[ "${{ env.HOOK_OLDER }}" == "true" ]]; then
                   cp /tmp/Patches/syscall_hook_patches_older.sh device_kernel/
                   cd device_kernel
                   bash syscall_hook_patches_older.sh
                   echo "execuated syscall patch older successfully."
                   if [[ "${{ env.KERNELSU_NAME }}" != "KernelSU-Next" ]]; then
                     cp /tmp/Patches/backport_patches.sh ./
                     bash backport_patches.sh
                     if [ "${{ env.FIRST_VERSION }}" -lt 5 ] && [ "${{ env.SECOND_VERSION }}" -lt 10 ]; then
                         cp /tmp/Patches/Patch/backport_kernel_read_and_kernel_write_to_ksu.patch ./
                         patch -p1 < backport_kernel_read_and_kernel_write_to_ksu.patch || true
                         echo "execuated backport patch kernel_read and kernel_read successfully. If you current kernel version < 4.14, then u maybe manual fixed it."
                     fi
                     echo "execuated backport patch successfully. "
                   else
                     echo "your kernel needn't backport patch."
                   fi
               elif [[ -f "/tmp/Patches/syscall_hook_patches.sh" ]]; then
                   cp /tmp/Patches/syscall_hook_patches.sh device_kernel/
                   cd device_kernel
                   bash syscall_hook_patches.sh
                   echo "execuated syscall patch successfully."
                   if [[ "${{ env.KERNELSU_NAME }}" != "KernelSU-Next" ]]; then
                     cp /tmp/Patches/backport_patches.sh ./
                     bash backport_patches.sh
                     if [ "${{ env.FIRST_VERSION }}" -lt 5 ] && [ "${{ env.SECOND_VERSION }}" -lt 10 ]; then
                         cp /tmp/Patches/Patch/backport_kernel_read_and_kernel_write_to_ksu.patch ./
                         patch -p1 < backport_kernel_read_and_kernel_write_to_ksu.patch || true
                         echo "execuated backport patch kernel_read and kernel_read successfully. If you current kernel version < 4.14, then u maybe manual fixed it."
                     fi
                     echo "execuated backport patch successfully."
                   fi
                else
                   echo "Cannot found syscall_hook_patches.sh in build project , please check u file existed in build project !"
                   false
               fi
            else
              echo "please input vaild option!"
              false
            fi
          fi  

      - name: Patch Kernel of SUSFS
        if: env.SUSFS_ENABLE == 'true'
        run: |
          cd $GITHUB_WORKSPACE/device_kernel/
          cp susfs4ksu/kernel_patches/50_add_susfs_in_kernel-${{ env.KERNEL_VERSION }}.patch ./

          patch -p1 < 50_add_susfs_in_kernel-${{ env.KERNEL_VERSION }}.patch || true


          if [[ "${{ env.KERNELSU_NAME }}"  == "KernelSU-Next" ]]; then
            if [[ "${{ env.KERNELSU_SOURCE }}" =~ ".sh" && "${{ env.KERNELSU_BRANCH }}" =~ "susfs" ]]; then
                echo "KernelSU-Next SuSFS Branch detected!"
            elif [[ "${{ env.KERNELSU_SOURCE }}" =~ ".sh" ]]; then
                git clone ${{ env.KERNELSU_SOURCE }} -b ${{ env.KERNELSU_BRANCH }}-susfs susfs_fixed
                rsync -av --exclude='.git' susfs_fixed/kernel/ KernelSU-Next/kernel/
            fi
          elif [[ "${{ env.KERNELSU_SUS_PATCH }}" == "true" ]]; then
            cp susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./${{ env.KERNELSU_NAME }}
            cd ${{ env.KERNELSU_NAME }}
            patch -p1 < 10_enable_susfs_for_ksu.patch || true
          fi

      - name: Updated SUSFS Version
        if: env.SUSFS_UPDATE == 'true'
        run: |
          cd $GITHUB_WORKSPACE/device_kernel/

          # Upgrade 1.5.7
          cp /tmp/Patches/Patch/susfs_upgrade_to_157.patch ./

          patch -p1 < susfs_upgrade_to_157.patch || true

          # Upgrade 1.5.8
          cp /tmp/Patches/Patch/susfs_upgrade_to_158_${{ env.KERNEL_VERSION }}.patch ./

          patch -p1 < susfs_upgrade_to_158_${{ env.KERNEL_VERSION }}.patch || true

          # Extra SUSFS Patch
          # cp NonGKI_Kernel_Patches/[patch_folder]/[patch_file].patch ./

          # patch -p1 < [patch_file].patch || true

      - name: Fixed Kernel Patch
        if: env.SUSFS_ENABLE == 'true' && env.SUSFS_FIXED == 'true'
        run: |
          cd $GITHUB_WORKSPACE/device_kernel/
          cp NonGKI_Kernel_Patches/k20p_aosp_sovietstar_a15/susfs_fixed.patch ./

          patch -p1 < susfs_fixed.patch || true

          # Upgrade SUSFS Version
          cp /tmp/Patches/Patch/susfs_upgrade_to_157.patch ./

          patch -p1 < susfs_upgrade_to_157.patch || true

      - name: Build the Kernel
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          export DTC_EXT=dtc
          export PATH=$(pwd)/aarch64/bin:/usr/lib/llvm-14/bin:$PATH
          export ARCH=arm64
          export LD=ld.lld
          echo "Building the kernel..."
          
          make $KERNEL_CMDLINE $KERNEL_DEFCONFIG CC="ccache clang-14"
          make $KERNEL_CMDLINE scripts CC="ccache clang-14"
          make $KERNEL_CMDLINE prepare CC="ccache clang-14"
          make $KERNEL_CMDLINE CC="ccache clang-14" LD="ld.lld" -j$(nproc --all)
          cp out/arch/arm64/boot/Image ../AnyKernel3
          cd ..
          ls -la AnyKernel3/ 
       
      - name: Package Kernel
        run: |
         echo "Packaging kernel from: $(pwd)"
         ls -la AnyKernel3/
         cd AnyKernel3
         zip -r ../OP7_KSUN.zip *
         echo "Created kernel zip:"
         ls -l ../*.zip
         cd ..

      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
           files: |
             OP7_KSUN.zip
        env:
            GITHUB_TOKEN: ${{ secrets.GH_PAT }}
